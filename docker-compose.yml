services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - desafio_default

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"     # Externo (localhost:9092)
      - "29092:29092"   # Interno (usado pelos containers)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - desafio_default

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: meudb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rm251829@
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    networks:
      - desafio_default

  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    image: desafio-backend
    container_name: backend
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/meudb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Rm251829@
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8081:8081"
    restart: always
    networks:
      - desafio_default

  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    image: desafio-frontend
    container_name: frontend
    ports:
      - "80:80"
    restart: always
    networks:
      - desafio_default

volumes:
  postgres_data:

networks:
  desafio_default:
    driver: bridge
